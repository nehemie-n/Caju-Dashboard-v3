"""
Django settings for cajulab_remote_sensing_dashboard project.
Generated by 'django-admin startproject' using Django 4.0.1.
For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/
For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

import os
from dotenv import load_dotenv, find_dotenv
from pathlib import Path
from django.utils.translation import gettext_lazy as _
from django.contrib.messages import constants as messages
import collections

collections.Callable = collections.abc.Callable
import sys


load_dotenv(find_dotenv())

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
CORE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/
# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
env = os.getenv("DJANGO_ENV", "local")
MESSAGE_TAGS = {
    messages.DEBUG: "alert-info",
    messages.INFO: "alert-info",
    messages.SUCCESS: "alert-success",
    messages.WARNING: "alert-warning",
    messages.ERROR: "alert-danger",
}

# Application definition
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.gis",
    "channels",
    "apps.authentication",
    "apps.dashboard",
    "phonenumber_field",
    "webpack_loader",
]

if env == "production":
    DEBUG = False
    ALLOWED_HOSTS = [
        "cajuboard.tnslabs.org",
    ]
elif env == "uat":
    DEBUG = True
    ALLOWED_HOSTS = [
        "testcajuboard.tnslabs.org",
    ]
    # Fix: You're accessing the development server over HTTPS, but it only supports HTTP.
    SESSION_COOKIE_SECURE = False
    CSRF_COOKIE_SECURE = False
    SECURE_SSL_REDIRECT = False
else:
    DEBUG = True
    ALLOWED_HOSTS = [
        "127.0.0.1",
        "ws://127.0.0.1:8000",
        "ws://127.0.0.1",
        "wss://127.0.0.1:8000",
        "wss://127.0.0.1",
    ]
    INSTALLED_APPS.insert(0, "daphne")

    # Fix: You're accessing the development server over HTTPS, but it only supports HTTP.
    SESSION_COOKIE_SECURE = False
    CSRF_COOKIE_SECURE = False
    SECURE_SSL_REDIRECT = False


MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.locale.LocaleMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]
ROOT_URLCONF = "cajulab_remote_sensing_dashboard.urls"
TEMPLATE_DIR = os.path.join(CORE_DIR, "apps/templates")
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [TEMPLATE_DIR],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "django.template.context_processors.i18n",
            ],
        },
    },
]

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_rabbitmq.core.RabbitmqChannelLayer",
        "CONFIG": {
            "host": f"amqp://{os.getenv('RABBIT_MQ_USERNAME')}:{os.getenv('RABBIT_MQ_PASSWORD')}@localhost:5672/{os.getenv('RABBIT_MQ_VHOST')}",
        },
    },
}


# WSGI_APPLICATION = "cajulab_remote_sensing_dashboard.wsgi.application"
ASGI_APPLICATION = "cajulab_remote_sensing_dashboard.asgi.application"
# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

# Check if the 'test' argument is in sys.argv
if "test" in sys.argv:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "my_db.db",
        },
        "Ivory Coast": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "Ivory Coast.db",
        },
        "Benin": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "Benin.db",
        },
    }
else:
    DATABASES = {
        "default": {
            "ENGINE": "django.contrib.gis.db.backends.mysql",
            "NAME": os.getenv("DASHBOARD_DB_NAME"),
            "USER": os.getenv("DASHBOARD_DB_USERNAME"),
            "PASSWORD": os.getenv("DASHBOARD_DB_PASSWORD"),
            "HOST": os.getenv("DASHBOARD_DB_HOSTNAME"),
            "PORT": os.getenv("DASHBOARD_DB_PORT"),
            "OPTIONS": {
                "init_command": "SET sql_mode='STRICT_TRANS_TABLES'",
                "charset": "utf8mb4",
            },
        },
        "Ivory Coast": {
            "ENGINE": "django.contrib.gis.db.backends.mysql",
            "NAME": os.getenv("DASHBOARD_DB_NAME_IVORY"),
            "USER": os.getenv("DASHBOARD_DB_USERNAME"),
            "PASSWORD": os.getenv("DASHBOARD_DB_PASSWORD"),
            "HOST": os.getenv("DASHBOARD_DB_HOSTNAME"),
            "PORT": os.getenv("DASHBOARD_DB_PORT"),
            "OPTIONS": {
                "init_command": "SET sql_mode='STRICT_TRANS_TABLES'",
                "charset": "utf8mb4",
            },
        },
        "Benin": {
            "ENGINE": "django.contrib.gis.db.backends.mysql",
            "NAME": os.getenv("DASHBOARD_DB_NAME_BENIN"),
            "USER": os.getenv("DASHBOARD_DB_USERNAME"),
            "PASSWORD": os.getenv("DASHBOARD_DB_PASSWORD"),
            "HOST": os.getenv("DASHBOARD_DB_HOSTNAME"),
            "PORT": os.getenv("DASHBOARD_DB_PORT"),
            "OPTIONS": {
                "init_command": "SET sql_mode='STRICT_TRANS_TABLES'",
                "charset": "utf8mb4",
            },
        },
    }


print(sys.argv)
# when making migrations we don't add routers
if "migrate" not in sys.argv and "makemigrations" not in sys.argv:
    print("DATABASE_ROUTERS cajulab_remote_sensing_dashboard.routers.AuthRouter")
    DATABASE_ROUTERS = ["cajulab_remote_sensing_dashboard.routers.AuthRouter"]

# If running tests we don't use production database
# We create an sqlite and destroy it
# Covers regular testing and django-coverage
if "test" in sys.argv or "test_coverage" in sys.argv:
    DATABASES["default"]["ENGINE"] = "django.db.backends.sqlite3"
    DATABASES["default"]["NAME"] = BASE_DIR / "db.sqlite3"


CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.db.DatabaseCache",
        "LOCATION": "cache_table",
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]
# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/
LANGUAGE_CODE = "en"
TIME_ZONE = "UTC"
USE_I18N = True
USE_TZ = True
LANGUAGES = (
    ("en", _("English")),
    ("fr", _("French")),
)
LOCALE_PATHS = (os.path.join(BASE_DIR, "locale/"),)

# CELERY SETTINGS
CELERY_TIMEZONE = "Africa/Porto-Novo"
CELERY_BROKER_URL = f'amqp://{os.getenv("RABBIT_MQ_USERNAME")}:{os.getenv("RABBIT_MQ_PASSWORD")}@localhost/{os.getenv("RABBIT_MQ_VHOST")}'


# https://docs.djangoproject.com/en/4.0/howto/static-files/
# django_heroku.settings(locals())
EMAIL_USE_TLS = True
EMAIL_HOST = "smtp.gmail.com"
EMAIL_HOST_USER = os.getenv("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = os.getenv("EMAIL_HOST_PASSWORD")
EMAIL_PORT = 587
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
MAILER_EMAIL_BACKEND = EMAIL_BACKEND
# EMAIL_PORT = 465
# EMAIL_USE_SSL = True
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER
# STATICFILES_STORAGE = 'whitenoise.django.GzipManifestStaticFilesStorage'
# STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
# prod_db = dj_database_url.config(conn_max_age=500)
# DATABASES['default'].update(prod_db)
# default translation language
# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
SESSION_COOKIE_AGE = 3600
SESSION_EXPIRE_AT_BROWSER_CLOSE = True
PHONENUMBER_DB_FORMAT = "INTERNATIONAL"
PHONENUMBER_DEFAULT_FORMAT = "INTERNATIONAL"
#############################################################
# SRC: https://devcenter.heroku.com/articles/django-assets
# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.9/howto/static-files/
if env == "production":
    STATIC_ROOT = "/var/www/cajuboard.tnslabs.org/static"
    STATIC_URL = "/static/"

    # Extra places for collectstatic to find static files.
    STATICFILES_DIRS = (BASE_DIR / "apps/static",)
    CSRF_TRUSTED_ORIGINS = ["https://cajuboard.tnslabs.org"]
elif env == "uat":
    STATIC_ROOT = "/var/www/testcajuboard.tnslabs.org/static"
    STATIC_URL = "/static/"

    # Extra places for collectstatic to find static files.
    STATICFILES_DIRS = (os.path.join(CORE_DIR, "apps/static"),)
    CSRF_TRUSTED_ORIGINS = ["https://testcajuboard.tnslabs.org"]
else:
    # Local/Docker environment
    STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")
    STATIC_URL = "/static/"

    # Extra places for collectstatic to find static files.
    STATICFILES_DIRS = (os.path.join(CORE_DIR, "apps/static"),)
    CSRF_TRUSTED_ORIGINS = ["http://localhost:8000", "http://127.0.0.1:8000"]

#############################################################
SECURE_HSTS_SECONDS = 15780000
SECURE_HSTS_PRELOAD = True
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
CSRF_COOKIE_SECURE = (
    True  # to avoid transmitting the CSRF cookie over HTTP accidentally.
)
SESSION_COOKIE_SECURE = (
    True  # to avoid transmitting the session cookie over HTTP accidentally.
)

SECURE_REFERRER_POLICY = "strict-origin-when-cross-origin"

#
if os.environ.get("GDAL_LIBRARY_PATH") is not None:
    GDAL_LIBRARY_PATH = os.environ.get("GDAL_LIBRARY_PATH")

# Webpack Loader
WEBPACK_LOADER = {
    "DEFAULT": {
        "BUNDLE_DIR_NAME": "assets/js/",
        "CACHE": not DEBUG,
        "STATS_FILE": os.path.join(BASE_DIR, "webpack-stats.json"),
        "POLL_INTERVAL": 0.1,
    }
}
